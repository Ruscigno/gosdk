// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnqueuerServiceClient is the client API for EnqueuerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnqueuerServiceClient interface {
	CreateEnqueuer(ctx context.Context, in *EnqueuerMessage, opts ...grpc.CallOption) (*EnqueuerIdMessage, error)
	ListEnqueuer(ctx context.Context, in *SourceIdMessage, opts ...grpc.CallOption) (*EnqueuerMessage, error)
	StartEnqueuer(ctx context.Context, in *EnqueuerIdMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StopEnqueuer(ctx context.Context, in *EnqueuerIdMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type enqueuerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnqueuerServiceClient(cc grpc.ClientConnInterface) EnqueuerServiceClient {
	return &enqueuerServiceClient{cc}
}

func (c *enqueuerServiceClient) CreateEnqueuer(ctx context.Context, in *EnqueuerMessage, opts ...grpc.CallOption) (*EnqueuerIdMessage, error) {
	out := new(EnqueuerIdMessage)
	err := c.cc.Invoke(ctx, "/tickerscraper.v1.EnqueuerService/CreateEnqueuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enqueuerServiceClient) ListEnqueuer(ctx context.Context, in *SourceIdMessage, opts ...grpc.CallOption) (*EnqueuerMessage, error) {
	out := new(EnqueuerMessage)
	err := c.cc.Invoke(ctx, "/tickerscraper.v1.EnqueuerService/ListEnqueuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enqueuerServiceClient) StartEnqueuer(ctx context.Context, in *EnqueuerIdMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tickerscraper.v1.EnqueuerService/StartEnqueuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enqueuerServiceClient) StopEnqueuer(ctx context.Context, in *EnqueuerIdMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tickerscraper.v1.EnqueuerService/StopEnqueuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnqueuerServiceServer is the server API for EnqueuerService service.
// All implementations must embed UnimplementedEnqueuerServiceServer
// for forward compatibility
type EnqueuerServiceServer interface {
	CreateEnqueuer(context.Context, *EnqueuerMessage) (*EnqueuerIdMessage, error)
	ListEnqueuer(context.Context, *SourceIdMessage) (*EnqueuerMessage, error)
	StartEnqueuer(context.Context, *EnqueuerIdMessage) (*emptypb.Empty, error)
	StopEnqueuer(context.Context, *EnqueuerIdMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedEnqueuerServiceServer()
}

// UnimplementedEnqueuerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnqueuerServiceServer struct {
}

func (UnimplementedEnqueuerServiceServer) CreateEnqueuer(context.Context, *EnqueuerMessage) (*EnqueuerIdMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnqueuer not implemented")
}
func (UnimplementedEnqueuerServiceServer) ListEnqueuer(context.Context, *SourceIdMessage) (*EnqueuerMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnqueuer not implemented")
}
func (UnimplementedEnqueuerServiceServer) StartEnqueuer(context.Context, *EnqueuerIdMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartEnqueuer not implemented")
}
func (UnimplementedEnqueuerServiceServer) StopEnqueuer(context.Context, *EnqueuerIdMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopEnqueuer not implemented")
}
func (UnimplementedEnqueuerServiceServer) mustEmbedUnimplementedEnqueuerServiceServer() {}

// UnsafeEnqueuerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnqueuerServiceServer will
// result in compilation errors.
type UnsafeEnqueuerServiceServer interface {
	mustEmbedUnimplementedEnqueuerServiceServer()
}

func RegisterEnqueuerServiceServer(s grpc.ServiceRegistrar, srv EnqueuerServiceServer) {
	s.RegisterService(&EnqueuerService_ServiceDesc, srv)
}

func _EnqueuerService_CreateEnqueuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueuerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnqueuerServiceServer).CreateEnqueuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tickerscraper.v1.EnqueuerService/CreateEnqueuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnqueuerServiceServer).CreateEnqueuer(ctx, req.(*EnqueuerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnqueuerService_ListEnqueuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceIdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnqueuerServiceServer).ListEnqueuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tickerscraper.v1.EnqueuerService/ListEnqueuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnqueuerServiceServer).ListEnqueuer(ctx, req.(*SourceIdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnqueuerService_StartEnqueuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueuerIdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnqueuerServiceServer).StartEnqueuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tickerscraper.v1.EnqueuerService/StartEnqueuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnqueuerServiceServer).StartEnqueuer(ctx, req.(*EnqueuerIdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnqueuerService_StopEnqueuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueuerIdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnqueuerServiceServer).StopEnqueuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tickerscraper.v1.EnqueuerService/StopEnqueuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnqueuerServiceServer).StopEnqueuer(ctx, req.(*EnqueuerIdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// EnqueuerService_ServiceDesc is the grpc.ServiceDesc for EnqueuerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnqueuerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tickerscraper.v1.EnqueuerService",
	HandlerType: (*EnqueuerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEnqueuer",
			Handler:    _EnqueuerService_CreateEnqueuer_Handler,
		},
		{
			MethodName: "ListEnqueuer",
			Handler:    _EnqueuerService_ListEnqueuer_Handler,
		},
		{
			MethodName: "StartEnqueuer",
			Handler:    _EnqueuerService_StartEnqueuer_Handler,
		},
		{
			MethodName: "StopEnqueuer",
			Handler:    _EnqueuerService_StopEnqueuer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
