// Copyright 2021 Sander Ruscigno
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: tradetransaction.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TradeRequestActions: Interaction between the client terminal and a trade server for executing the order placing operation is performed by using trade requests
type TradeRequestActions int32

const (
	TradeRequestActions_UNDEFINED_00_ACTION_DEAL TradeRequestActions = 0  //Should not be used
	TradeRequestActions_TRADE_ACTION_DEAL        TradeRequestActions = 1  //Place a trade order for an immediate execution with the specified parameters (market order)
	TradeRequestActions_UNDEFINED_01_ACTION_DEAL TradeRequestActions = 2  //Should not be used
	TradeRequestActions_UNDEFINED_02_ACTION_DEAL TradeRequestActions = 3  //Should not be used
	TradeRequestActions_UNDEFINED_03_ACTION_DEAL TradeRequestActions = 4  //Should not be used
	TradeRequestActions_TRADE_ACTION_PENDING     TradeRequestActions = 5  //Place a trade order for the execution under specified conditions (pending order)
	TradeRequestActions_TRADE_ACTION_SLTP        TradeRequestActions = 6  //Modify Stop Loss and Take Profit values of an opened position
	TradeRequestActions_TRADE_ACTION_MODIFY      TradeRequestActions = 7  //Modify the parameters of the order placed previously
	TradeRequestActions_TRADE_ACTION_REMOVE      TradeRequestActions = 8  //Delete the pending order placed previously
	TradeRequestActions_UNDEFINED_04_ACTION_DEAL TradeRequestActions = 9  //Should not be used
	TradeRequestActions_TRADE_ACTION_CLOSE_BY    TradeRequestActions = 10 //Close a position by an opposite one
)

// Enum value maps for TradeRequestActions.
var (
	TradeRequestActions_name = map[int32]string{
		0:  "UNDEFINED_00_ACTION_DEAL",
		1:  "TRADE_ACTION_DEAL",
		2:  "UNDEFINED_01_ACTION_DEAL",
		3:  "UNDEFINED_02_ACTION_DEAL",
		4:  "UNDEFINED_03_ACTION_DEAL",
		5:  "TRADE_ACTION_PENDING",
		6:  "TRADE_ACTION_SLTP",
		7:  "TRADE_ACTION_MODIFY",
		8:  "TRADE_ACTION_REMOVE",
		9:  "UNDEFINED_04_ACTION_DEAL",
		10: "TRADE_ACTION_CLOSE_BY",
	}
	TradeRequestActions_value = map[string]int32{
		"UNDEFINED_00_ACTION_DEAL": 0,
		"TRADE_ACTION_DEAL":        1,
		"UNDEFINED_01_ACTION_DEAL": 2,
		"UNDEFINED_02_ACTION_DEAL": 3,
		"UNDEFINED_03_ACTION_DEAL": 4,
		"TRADE_ACTION_PENDING":     5,
		"TRADE_ACTION_SLTP":        6,
		"TRADE_ACTION_MODIFY":      7,
		"TRADE_ACTION_REMOVE":      8,
		"UNDEFINED_04_ACTION_DEAL": 9,
		"TRADE_ACTION_CLOSE_BY":    10,
	}
)

func (x TradeRequestActions) Enum() *TradeRequestActions {
	p := new(TradeRequestActions)
	*p = x
	return p
}

func (x TradeRequestActions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeRequestActions) Descriptor() protoreflect.EnumDescriptor {
	return file_tradetransaction_proto_enumTypes[0].Descriptor()
}

func (TradeRequestActions) Type() protoreflect.EnumType {
	return &file_tradetransaction_proto_enumTypes[0]
}

func (x TradeRequestActions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeRequestActions.Descriptor instead.
func (TradeRequestActions) EnumDescriptor() ([]byte, []int) {
	return file_tradetransaction_proto_rawDescGZIP(), []int{0}
}

// When performing some definite actions on a trade account, its state changes.
type TradeTransactionType int32

const (
	TradeTransactionType_TRADE_TRANSACTION_ORDER_ADD      TradeTransactionType = 0  // Adding a new open order.
	TradeTransactionType_TRADE_TRANSACTION_ORDER_UPDATE   TradeTransactionType = 1  // Updating an open order. The updates include not only evident changes from the client terminal or a trade server sides but also changes of an order state when setting it (for example, transition from ORDER_STATE_STARTED to ORDER_STATE_PLACED or from ORDER_STATE_PLACED to ORDER_STATE_PARTIAL, etc.).
	TradeTransactionType_TRADE_TRANSACTION_ORDER_DELETE   TradeTransactionType = 2  // Removing an order from the list of the open ones. An order can be deleted from the open ones as a result of setting an appropriate request or execution (filling) and moving to the history.
	TradeTransactionType_TRADE_TRANSACTION_HISTORY_ADD    TradeTransactionType = 3  // Adding an order to the history as a result of execution or cancellation.
	TradeTransactionType_TRADE_TRANSACTION_HISTORY_UPDATE TradeTransactionType = 4  // Changing an order located in the orders history. This type is provided for enhancing functionality on a trade server side.
	TradeTransactionType_TRADE_TRANSACTION_HISTORY_DELETE TradeTransactionType = 5  // Deleting an order from the orders history. This type is provided for enhancing functionality on a trade server side.
	TradeTransactionType_TRADE_TRANSACTION_DEAL_ADD       TradeTransactionType = 6  // Adding a deal to the history. The action is performed as a result of an order execution or performing operations with an account balance.
	TradeTransactionType_TRADE_TRANSACTION_DEAL_UPDATE    TradeTransactionType = 7  // Updating a deal in the history. There may be cases when a previously executed deal is changed on a server. For example, a deal has been changed in an external trading system (exchange) where it was previously transferred by a broker.
	TradeTransactionType_TRADE_TRANSACTION_DEAL_DELETE    TradeTransactionType = 8  // Deleting a deal from the history. There may be cases when a previously executed deal is deleted from a server. For example, a deal has been deleted in an external trading system (exchange) where it was previously transferred by a broker.
	TradeTransactionType_TRADE_TRANSACTION_POSITION       TradeTransactionType = 9  // Changing a position not related to a deal execution. This type of transaction shows that a position has been changed on a trade server side. Position volume, open price, Stop Loss and Take Profit levels can be changed. Data on changes are submitted in MqlTradeTransaction structure via OnTradeTransaction handler. Position change (adding, changing or closing), as a result of a deal execution, does not lead to the occurrence of TRADE_TRANSACTION_POSITION transaction.
	TradeTransactionType_TRADE_TRANSACTION_REQUEST        TradeTransactionType = 10 // Notification of the fact that a trade request has been processed by a server and processing result has been received. Only type field (trade transaction type) must be analyzed for such transactions in MqlTradeTransaction structure. The second and third parameters of OnTradeTransaction (request and result) must be analyzed for additional data.
)

// Enum value maps for TradeTransactionType.
var (
	TradeTransactionType_name = map[int32]string{
		0:  "TRADE_TRANSACTION_ORDER_ADD",
		1:  "TRADE_TRANSACTION_ORDER_UPDATE",
		2:  "TRADE_TRANSACTION_ORDER_DELETE",
		3:  "TRADE_TRANSACTION_HISTORY_ADD",
		4:  "TRADE_TRANSACTION_HISTORY_UPDATE",
		5:  "TRADE_TRANSACTION_HISTORY_DELETE",
		6:  "TRADE_TRANSACTION_DEAL_ADD",
		7:  "TRADE_TRANSACTION_DEAL_UPDATE",
		8:  "TRADE_TRANSACTION_DEAL_DELETE",
		9:  "TRADE_TRANSACTION_POSITION",
		10: "TRADE_TRANSACTION_REQUEST",
	}
	TradeTransactionType_value = map[string]int32{
		"TRADE_TRANSACTION_ORDER_ADD":      0,
		"TRADE_TRANSACTION_ORDER_UPDATE":   1,
		"TRADE_TRANSACTION_ORDER_DELETE":   2,
		"TRADE_TRANSACTION_HISTORY_ADD":    3,
		"TRADE_TRANSACTION_HISTORY_UPDATE": 4,
		"TRADE_TRANSACTION_HISTORY_DELETE": 5,
		"TRADE_TRANSACTION_DEAL_ADD":       6,
		"TRADE_TRANSACTION_DEAL_UPDATE":    7,
		"TRADE_TRANSACTION_DEAL_DELETE":    8,
		"TRADE_TRANSACTION_POSITION":       9,
		"TRADE_TRANSACTION_REQUEST":        10,
	}
)

func (x TradeTransactionType) Enum() *TradeTransactionType {
	p := new(TradeTransactionType)
	*p = x
	return p
}

func (x TradeTransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeTransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_tradetransaction_proto_enumTypes[1].Descriptor()
}

func (TradeTransactionType) Type() protoreflect.EnumType {
	return &file_tradetransaction_proto_enumTypes[1]
}

func (x TradeTransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeTransactionType.Descriptor instead.
func (TradeTransactionType) EnumDescriptor() ([]byte, []int) {
	return file_tradetransaction_proto_rawDescGZIP(), []int{1}
}

// TradeTransaction: Structure of a Trade Transaction
type TradeTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       int64                `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                          // Account ID
	OrderId         int64                `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                // Order ticket
	CreationOrder   int64                `protobuf:"varint,3,opt,name=creation_order,json=creationOrder,proto3" json:"creation_order,omitempty"`                              // Creation order
	DealId          int64                `protobuf:"varint,4,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`                                                   // Deal ticket
	Symbol          string               `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                                  // Trade symbol name
	TradeType       TradeTransactionType `protobuf:"varint,6,opt,name=trade_type,json=tradeType,proto3,enum=tickerbeats.v1.TradeTransactionType" json:"trade_type,omitempty"` // Trade transaction type
	OrderType       OrderType            `protobuf:"varint,7,opt,name=order_type,json=orderType,proto3,enum=tickerbeats.v1.OrderType" json:"order_type,omitempty"`            // Order type
	OrderState      OrderState           `protobuf:"varint,8,opt,name=order_state,json=orderState,proto3,enum=tickerbeats.v1.OrderState" json:"order_state,omitempty"`        // Order state
	DealType        DealType             `protobuf:"varint,9,opt,name=deal_type,json=dealType,proto3,enum=tickerbeats.v1.DealType" json:"deal_type,omitempty"`                // Deal type
	TimeType        OrderTypeTime        `protobuf:"varint,10,opt,name=time_type,json=timeType,proto3,enum=tickerbeats.v1.OrderTypeTime" json:"time_type,omitempty"`          // Order type by action period
	TimeExpiration  int64                `protobuf:"varint,11,opt,name=time_expiration,json=timeExpiration,proto3" json:"time_expiration,omitempty"`                          // Order expiration time
	Price           float64              `protobuf:"fixed64,12,opt,name=price,proto3" json:"price,omitempty"`                                                                 // Price
	PriceTrigger    float64              `protobuf:"fixed64,13,opt,name=price_trigger,json=priceTrigger,proto3" json:"price_trigger,omitempty"`                               // Stop limit order activation price
	PriceStopLoss   float64              `protobuf:"fixed64,14,opt,name=price_stop_loss,json=priceStopLoss,proto3" json:"price_stop_loss,omitempty"`                          // Stop Loss level
	PriceTakeProfit float64              `protobuf:"fixed64,15,opt,name=price_take_profit,json=priceTakeProfit,proto3" json:"price_take_profit,omitempty"`                    // Take Profit level
	Volume          float64              `protobuf:"fixed64,16,opt,name=volume,proto3" json:"volume,omitempty"`                                                               // Volume in lots
	PositionId      int64                `protobuf:"varint,17,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`                                      // Position ticket
	PositionBy      int64                `protobuf:"varint,18,opt,name=position_by,json=positionBy,proto3" json:"position_by,omitempty"`                                      // Ticket of an opposite position
	Created         int64                `protobuf:"varint,19,opt,name=created,proto3" json:"created,omitempty"`
	Updated         int64                `protobuf:"varint,20,opt,name=updated,proto3" json:"updated,omitempty"`
	Deleted         int64                `protobuf:"varint,21,opt,name=deleted,proto3" json:"deleted,omitempty"`
	TimeGMTOffset   int64                `protobuf:"varint,22,opt,name=TimeGMTOffset,proto3" json:"TimeGMTOffset,omitempty"`
	InternalId      int32                `protobuf:"varint,23,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"` // Internal ID
}

func (x *TradeTransaction) Reset() {
	*x = TradeTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradetransaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeTransaction) ProtoMessage() {}

func (x *TradeTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_tradetransaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeTransaction.ProtoReflect.Descriptor instead.
func (*TradeTransaction) Descriptor() ([]byte, []int) {
	return file_tradetransaction_proto_rawDescGZIP(), []int{0}
}

func (x *TradeTransaction) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *TradeTransaction) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *TradeTransaction) GetCreationOrder() int64 {
	if x != nil {
		return x.CreationOrder
	}
	return 0
}

func (x *TradeTransaction) GetDealId() int64 {
	if x != nil {
		return x.DealId
	}
	return 0
}

func (x *TradeTransaction) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TradeTransaction) GetTradeType() TradeTransactionType {
	if x != nil {
		return x.TradeType
	}
	return TradeTransactionType_TRADE_TRANSACTION_ORDER_ADD
}

func (x *TradeTransaction) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_BUY
}

func (x *TradeTransaction) GetOrderState() OrderState {
	if x != nil {
		return x.OrderState
	}
	return OrderState_ORDER_STATE_STARTED
}

func (x *TradeTransaction) GetDealType() DealType {
	if x != nil {
		return x.DealType
	}
	return DealType_DEAL_TYPE_BUY
}

func (x *TradeTransaction) GetTimeType() OrderTypeTime {
	if x != nil {
		return x.TimeType
	}
	return OrderTypeTime_ORDER_TIME_GTC
}

func (x *TradeTransaction) GetTimeExpiration() int64 {
	if x != nil {
		return x.TimeExpiration
	}
	return 0
}

func (x *TradeTransaction) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeTransaction) GetPriceTrigger() float64 {
	if x != nil {
		return x.PriceTrigger
	}
	return 0
}

func (x *TradeTransaction) GetPriceStopLoss() float64 {
	if x != nil {
		return x.PriceStopLoss
	}
	return 0
}

func (x *TradeTransaction) GetPriceTakeProfit() float64 {
	if x != nil {
		return x.PriceTakeProfit
	}
	return 0
}

func (x *TradeTransaction) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *TradeTransaction) GetPositionId() int64 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

func (x *TradeTransaction) GetPositionBy() int64 {
	if x != nil {
		return x.PositionBy
	}
	return 0
}

func (x *TradeTransaction) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *TradeTransaction) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *TradeTransaction) GetDeleted() int64 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *TradeTransaction) GetTimeGMTOffset() int64 {
	if x != nil {
		return x.TimeGMTOffset
	}
	return 0
}

func (x *TradeTransaction) GetInternalId() int32 {
	if x != nil {
		return x.InternalId
	}
	return 0
}

// TradeRequest: The Structure of a Trade Request
type TradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      int64               `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                             // Account ID
	OrderId        int64               `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                   // Order ticket
	CreationOrder  int64               `protobuf:"varint,3,opt,name=creation_order,json=creationOrder,proto3" json:"creation_order,omitempty"`                                 // Creation order
	Action         TradeRequestActions `protobuf:"varint,4,opt,name=action,proto3,enum=tickerbeats.v1.TradeRequestActions" json:"action,omitempty"`                            // Trade operation type
	Magic          int64               `protobuf:"varint,5,opt,name=magic,proto3" json:"magic,omitempty"`                                                                      // Expert Advisor ID (magic number)
	Symbol         string              `protobuf:"bytes,6,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                                     // Trade symbol
	Volume         float64             `protobuf:"fixed64,7,opt,name=volume,proto3" json:"volume,omitempty"`                                                                   // Requested volume for a deal in lots
	Price          float64             `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`                                                                     // Price
	StopLimit      float64             `protobuf:"fixed64,9,opt,name=stop_limit,json=stopLimit,proto3" json:"stop_limit,omitempty"`                                            // Stop Limit level of the order
	StopLoss       float64             `protobuf:"fixed64,10,opt,name=stop_loss,json=stopLoss,proto3" json:"stop_loss,omitempty"`                                              // Stop Loss level of the order
	TakeProfit     float64             `protobuf:"fixed64,11,opt,name=take_profit,json=takeProfit,proto3" json:"take_profit,omitempty"`                                        // Take Profit level of the order
	Deviation      int64               `protobuf:"varint,12,opt,name=deviation,proto3" json:"deviation,omitempty"`                                                             // Maximal possible deviation from the requested price
	OrderType      OrderType           `protobuf:"varint,13,opt,name=order_type,json=orderType,proto3,enum=tickerbeats.v1.OrderType" json:"order_type,omitempty"`              // Order type
	TypeFilling    OrderFillingType    `protobuf:"varint,14,opt,name=type_filling,json=typeFilling,proto3,enum=tickerbeats.v1.OrderFillingType" json:"type_filling,omitempty"` // Order execution type
	TypeTime       OrderTypeTime       `protobuf:"varint,15,opt,name=type_time,json=typeTime,proto3,enum=tickerbeats.v1.OrderTypeTime" json:"type_time,omitempty"`             // Order expiration type
	TimeExpiration int64               `protobuf:"varint,16,opt,name=time_expiration,json=timeExpiration,proto3" json:"time_expiration,omitempty"`                             // Order expiration time (for the orders of ORDER_TIME_SPECIFIED type)
	Comment        string              `protobuf:"bytes,17,opt,name=comment,proto3" json:"comment,omitempty"`                                                                  // Order comment
	PositionId     int64               `protobuf:"varint,18,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`                                         // TradeTransaction ticket
	PositionBy     int64               `protobuf:"varint,19,opt,name=position_by,json=positionBy,proto3" json:"position_by,omitempty"`                                         // The ticket of an opposite tradetransaction
	Created        int64               `protobuf:"varint,20,opt,name=created,proto3" json:"created,omitempty"`
	Updated        int64               `protobuf:"varint,21,opt,name=updated,proto3" json:"updated,omitempty"`
	Deleted        int64               `protobuf:"varint,22,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Entry          DealEntry           `protobuf:"varint,23,opt,name=entry,proto3,enum=tickerbeats.v1.DealEntry" json:"entry,omitempty"` // DealEntry: Deal entry - entry in, entry out, reverse
	TimeGMTOffset  int64               `protobuf:"varint,24,opt,name=TimeGMTOffset,proto3" json:"TimeGMTOffset,omitempty"`
}

func (x *TradeRequest) Reset() {
	*x = TradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradetransaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRequest) ProtoMessage() {}

func (x *TradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tradetransaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRequest.ProtoReflect.Descriptor instead.
func (*TradeRequest) Descriptor() ([]byte, []int) {
	return file_tradetransaction_proto_rawDescGZIP(), []int{1}
}

func (x *TradeRequest) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *TradeRequest) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *TradeRequest) GetCreationOrder() int64 {
	if x != nil {
		return x.CreationOrder
	}
	return 0
}

func (x *TradeRequest) GetAction() TradeRequestActions {
	if x != nil {
		return x.Action
	}
	return TradeRequestActions_UNDEFINED_00_ACTION_DEAL
}

func (x *TradeRequest) GetMagic() int64 {
	if x != nil {
		return x.Magic
	}
	return 0
}

func (x *TradeRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TradeRequest) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *TradeRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeRequest) GetStopLimit() float64 {
	if x != nil {
		return x.StopLimit
	}
	return 0
}

func (x *TradeRequest) GetStopLoss() float64 {
	if x != nil {
		return x.StopLoss
	}
	return 0
}

func (x *TradeRequest) GetTakeProfit() float64 {
	if x != nil {
		return x.TakeProfit
	}
	return 0
}

func (x *TradeRequest) GetDeviation() int64 {
	if x != nil {
		return x.Deviation
	}
	return 0
}

func (x *TradeRequest) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_BUY
}

func (x *TradeRequest) GetTypeFilling() OrderFillingType {
	if x != nil {
		return x.TypeFilling
	}
	return OrderFillingType_ORDER_FILLING_FOK
}

func (x *TradeRequest) GetTypeTime() OrderTypeTime {
	if x != nil {
		return x.TypeTime
	}
	return OrderTypeTime_ORDER_TIME_GTC
}

func (x *TradeRequest) GetTimeExpiration() int64 {
	if x != nil {
		return x.TimeExpiration
	}
	return 0
}

func (x *TradeRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TradeRequest) GetPositionId() int64 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

func (x *TradeRequest) GetPositionBy() int64 {
	if x != nil {
		return x.PositionBy
	}
	return 0
}

func (x *TradeRequest) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *TradeRequest) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *TradeRequest) GetDeleted() int64 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *TradeRequest) GetEntry() DealEntry {
	if x != nil {
		return x.Entry
	}
	return DealEntry_DEAL_ENTRY_IN
}

func (x *TradeRequest) GetTimeGMTOffset() int64 {
	if x != nil {
		return x.TimeGMTOffset
	}
	return 0
}

// TradeResult: The Structure of a Trade Result
type TradeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       int64   `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                    // Account ID
	OrderId         int64   `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                          // Order ticket, if it is placed
	CreationOrder   int64   `protobuf:"varint,3,opt,name=creation_order,json=creationOrder,proto3" json:"creation_order,omitempty"`        // Creation order
	Retcode         uint32  `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`                                         // Operation return code
	DealId          int64   `protobuf:"varint,5,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`                             // Deal ticket, if it is performed
	Volume          float64 `protobuf:"fixed64,6,opt,name=volume,proto3" json:"volume,omitempty"`                                          // Deal volume, confirmed by broker
	Price           float64 `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`                                            // Deal price, confirmed by broker
	Bid             float64 `protobuf:"fixed64,8,opt,name=bid,proto3" json:"bid,omitempty"`                                                // Current Bid price
	Ask             float64 `protobuf:"fixed64,9,opt,name=ask,proto3" json:"ask,omitempty"`                                                // Current Ask price
	Comment         string  `protobuf:"bytes,10,opt,name=comment,proto3" json:"comment,omitempty"`                                         // Broker comment to operation (by default it is filled by description of trade server return code)
	RequestId       uint32  `protobuf:"varint,11,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`                   // Request ID set by the terminal during the dispatch
	RetcodeExternal uint32  `protobuf:"varint,12,opt,name=retcode_external,json=retcodeExternal,proto3" json:"retcode_external,omitempty"` // Return code of an external trading system
	Created         int64   `protobuf:"varint,13,opt,name=created,proto3" json:"created,omitempty"`
	Updated         int64   `protobuf:"varint,14,opt,name=updated,proto3" json:"updated,omitempty"`
	Deleted         int64   `protobuf:"varint,15,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *TradeResult) Reset() {
	*x = TradeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradetransaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeResult) ProtoMessage() {}

func (x *TradeResult) ProtoReflect() protoreflect.Message {
	mi := &file_tradetransaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeResult.ProtoReflect.Descriptor instead.
func (*TradeResult) Descriptor() ([]byte, []int) {
	return file_tradetransaction_proto_rawDescGZIP(), []int{2}
}

func (x *TradeResult) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *TradeResult) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *TradeResult) GetCreationOrder() int64 {
	if x != nil {
		return x.CreationOrder
	}
	return 0
}

func (x *TradeResult) GetRetcode() uint32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *TradeResult) GetDealId() int64 {
	if x != nil {
		return x.DealId
	}
	return 0
}

func (x *TradeResult) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *TradeResult) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeResult) GetBid() float64 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *TradeResult) GetAsk() float64 {
	if x != nil {
		return x.Ask
	}
	return 0
}

func (x *TradeResult) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TradeResult) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *TradeResult) GetRetcodeExternal() uint32 {
	if x != nil {
		return x.RetcodeExternal
	}
	return 0
}

func (x *TradeResult) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *TradeResult) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *TradeResult) GetDeleted() int64 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

var File_tradetransaction_proto protoreflect.FileDescriptor

var file_tradetransaction_proto_rawDesc = []byte{
	0x0a, 0x16, 0x74, 0x72, 0x61, 0x64, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x62, 0x65, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xfa, 0x06, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x43, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x62, 0x65, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x4c,
	0x6f, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x47,
	0x4d, 0x54, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x54, 0x69, 0x6d, 0x65, 0x47, 0x4d, 0x54, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0xe8,
	0x06, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x3b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61,
	0x67, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73,
	0x74, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x6f,
	0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43,
	0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62,
	0x65, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x4d, 0x54, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x69, 0x6d, 0x65,
	0x47, 0x4d, 0x54, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xa5, 0x03, 0x0a, 0x0b, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x73, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x2a, 0xc0, 0x02, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x30, 0x30, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x30, 0x31, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x30, 0x32, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x30, 0x33, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x4c, 0x54, 0x50, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59,
	0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x30, 0x34, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f,
	0x42, 0x59, 0x10, 0x0a, 0x2a, 0x93, 0x03, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x53, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12,
	0x24, 0x0a, 0x20, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f,
	0x41, 0x44, 0x44, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x41, 0x4c, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0a, 0x42, 0x11, 0x5a, 0x0f, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x2d, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tradetransaction_proto_rawDescOnce sync.Once
	file_tradetransaction_proto_rawDescData = file_tradetransaction_proto_rawDesc
)

func file_tradetransaction_proto_rawDescGZIP() []byte {
	file_tradetransaction_proto_rawDescOnce.Do(func() {
		file_tradetransaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_tradetransaction_proto_rawDescData)
	})
	return file_tradetransaction_proto_rawDescData
}

var file_tradetransaction_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tradetransaction_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_tradetransaction_proto_goTypes = []interface{}{
	(TradeRequestActions)(0),  // 0: tickerbeats.v1.TradeRequestActions
	(TradeTransactionType)(0), // 1: tickerbeats.v1.TradeTransactionType
	(*TradeTransaction)(nil),  // 2: tickerbeats.v1.TradeTransaction
	(*TradeRequest)(nil),      // 3: tickerbeats.v1.TradeRequest
	(*TradeResult)(nil),       // 4: tickerbeats.v1.TradeResult
	(OrderType)(0),            // 5: tickerbeats.v1.OrderType
	(OrderState)(0),           // 6: tickerbeats.v1.OrderState
	(DealType)(0),             // 7: tickerbeats.v1.DealType
	(OrderTypeTime)(0),        // 8: tickerbeats.v1.OrderTypeTime
	(OrderFillingType)(0),     // 9: tickerbeats.v1.OrderFillingType
	(DealEntry)(0),            // 10: tickerbeats.v1.DealEntry
}
var file_tradetransaction_proto_depIdxs = []int32{
	1,  // 0: tickerbeats.v1.TradeTransaction.trade_type:type_name -> tickerbeats.v1.TradeTransactionType
	5,  // 1: tickerbeats.v1.TradeTransaction.order_type:type_name -> tickerbeats.v1.OrderType
	6,  // 2: tickerbeats.v1.TradeTransaction.order_state:type_name -> tickerbeats.v1.OrderState
	7,  // 3: tickerbeats.v1.TradeTransaction.deal_type:type_name -> tickerbeats.v1.DealType
	8,  // 4: tickerbeats.v1.TradeTransaction.time_type:type_name -> tickerbeats.v1.OrderTypeTime
	0,  // 5: tickerbeats.v1.TradeRequest.action:type_name -> tickerbeats.v1.TradeRequestActions
	5,  // 6: tickerbeats.v1.TradeRequest.order_type:type_name -> tickerbeats.v1.OrderType
	9,  // 7: tickerbeats.v1.TradeRequest.type_filling:type_name -> tickerbeats.v1.OrderFillingType
	8,  // 8: tickerbeats.v1.TradeRequest.type_time:type_name -> tickerbeats.v1.OrderTypeTime
	10, // 9: tickerbeats.v1.TradeRequest.entry:type_name -> tickerbeats.v1.DealEntry
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_tradetransaction_proto_init() }
func file_tradetransaction_proto_init() {
	if File_tradetransaction_proto != nil {
		return
	}
	file_deal_proto_init()
	file_order_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tradetransaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradetransaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradetransaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tradetransaction_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tradetransaction_proto_goTypes,
		DependencyIndexes: file_tradetransaction_proto_depIdxs,
		EnumInfos:         file_tradetransaction_proto_enumTypes,
		MessageInfos:      file_tradetransaction_proto_msgTypes,
	}.Build()
	File_tradetransaction_proto = out.File
	file_tradetransaction_proto_rawDesc = nil
	file_tradetransaction_proto_goTypes = nil
	file_tradetransaction_proto_depIdxs = nil
}
