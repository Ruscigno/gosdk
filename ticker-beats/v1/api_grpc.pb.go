// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mql5_background_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TickerBeatsServiceClient is the client API for TickerBeatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TickerBeatsServiceClient interface {
	// Gets all deals from the signals
	GetSignalDeals(ctx context.Context, in *GetSignalDealsRequest, opts ...grpc.CallOption) (*GetSignalDealsResponse, error)
}

type tickerBeatsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTickerBeatsServiceClient(cc grpc.ClientConnInterface) TickerBeatsServiceClient {
	return &tickerBeatsServiceClient{cc}
}

func (c *tickerBeatsServiceClient) GetSignalDeals(ctx context.Context, in *GetSignalDealsRequest, opts ...grpc.CallOption) (*GetSignalDealsResponse, error) {
	out := new(GetSignalDealsResponse)
	err := c.cc.Invoke(ctx, "/mql5_background.v1.TickerBeatsService/GetSignalDeals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TickerBeatsServiceServer is the server API for TickerBeatsService service.
// All implementations must embed UnimplementedTickerBeatsServiceServer
// for forward compatibility
type TickerBeatsServiceServer interface {
	// Gets all deals from the signals
	GetSignalDeals(context.Context, *GetSignalDealsRequest) (*GetSignalDealsResponse, error)
	mustEmbedUnimplementedTickerBeatsServiceServer()
}

// UnimplementedTickerBeatsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTickerBeatsServiceServer struct {
}

func (UnimplementedTickerBeatsServiceServer) GetSignalDeals(context.Context, *GetSignalDealsRequest) (*GetSignalDealsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignalDeals not implemented")
}
func (UnimplementedTickerBeatsServiceServer) mustEmbedUnimplementedTickerBeatsServiceServer() {}

// UnsafeTickerBeatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TickerBeatsServiceServer will
// result in compilation errors.
type UnsafeTickerBeatsServiceServer interface {
	mustEmbedUnimplementedTickerBeatsServiceServer()
}

func RegisterTickerBeatsServiceServer(s grpc.ServiceRegistrar, srv TickerBeatsServiceServer) {
	s.RegisterService(&TickerBeatsService_ServiceDesc, srv)
}

func _TickerBeatsService_GetSignalDeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignalDealsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickerBeatsServiceServer).GetSignalDeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mql5_background.v1.TickerBeatsService/GetSignalDeals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickerBeatsServiceServer).GetSignalDeals(ctx, req.(*GetSignalDealsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TickerBeatsService_ServiceDesc is the grpc.ServiceDesc for TickerBeatsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TickerBeatsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mql5_background.v1.TickerBeatsService",
	HandlerType: (*TickerBeatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSignalDeals",
			Handler:    _TickerBeatsService_GetSignalDeals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// TransactionSServiceClient is the client API for TransactionSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionSServiceClient interface {
	// Creates a new account
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Creates a new deal
	CreateDeals(ctx context.Context, in *CreateDealsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Creates a new order
	CreateOrders(ctx context.Context, in *CreateOrdersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Creates a new position
	CreatePositions(ctx context.Context, in *CreatePositionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Creates a trade transation
	CreateTradeTransaction(ctx context.Context, in *CreateTradeTransactionRequest, opts ...grpc.CallOption) (*GetSignalDealsResponse, error)
}

type transactionSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionSServiceClient(cc grpc.ClientConnInterface) TransactionSServiceClient {
	return &transactionSServiceClient{cc}
}

func (c *transactionSServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mql5_background.v1.TransactionSService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionSServiceClient) CreateDeals(ctx context.Context, in *CreateDealsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mql5_background.v1.TransactionSService/CreateDeals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionSServiceClient) CreateOrders(ctx context.Context, in *CreateOrdersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mql5_background.v1.TransactionSService/CreateOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionSServiceClient) CreatePositions(ctx context.Context, in *CreatePositionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mql5_background.v1.TransactionSService/CreatePositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionSServiceClient) CreateTradeTransaction(ctx context.Context, in *CreateTradeTransactionRequest, opts ...grpc.CallOption) (*GetSignalDealsResponse, error) {
	out := new(GetSignalDealsResponse)
	err := c.cc.Invoke(ctx, "/mql5_background.v1.TransactionSService/CreateTradeTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionSServiceServer is the server API for TransactionSService service.
// All implementations must embed UnimplementedTransactionSServiceServer
// for forward compatibility
type TransactionSServiceServer interface {
	// Creates a new account
	CreateAccount(context.Context, *CreateAccountRequest) (*emptypb.Empty, error)
	// Creates a new deal
	CreateDeals(context.Context, *CreateDealsRequest) (*emptypb.Empty, error)
	// Creates a new order
	CreateOrders(context.Context, *CreateOrdersRequest) (*emptypb.Empty, error)
	// Creates a new position
	CreatePositions(context.Context, *CreatePositionsRequest) (*emptypb.Empty, error)
	// Creates a trade transation
	CreateTradeTransaction(context.Context, *CreateTradeTransactionRequest) (*GetSignalDealsResponse, error)
	mustEmbedUnimplementedTransactionSServiceServer()
}

// UnimplementedTransactionSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionSServiceServer struct {
}

func (UnimplementedTransactionSServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedTransactionSServiceServer) CreateDeals(context.Context, *CreateDealsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeals not implemented")
}
func (UnimplementedTransactionSServiceServer) CreateOrders(context.Context, *CreateOrdersRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrders not implemented")
}
func (UnimplementedTransactionSServiceServer) CreatePositions(context.Context, *CreatePositionsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePositions not implemented")
}
func (UnimplementedTransactionSServiceServer) CreateTradeTransaction(context.Context, *CreateTradeTransactionRequest) (*GetSignalDealsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTradeTransaction not implemented")
}
func (UnimplementedTransactionSServiceServer) mustEmbedUnimplementedTransactionSServiceServer() {}

// UnsafeTransactionSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionSServiceServer will
// result in compilation errors.
type UnsafeTransactionSServiceServer interface {
	mustEmbedUnimplementedTransactionSServiceServer()
}

func RegisterTransactionSServiceServer(s grpc.ServiceRegistrar, srv TransactionSServiceServer) {
	s.RegisterService(&TransactionSService_ServiceDesc, srv)
}

func _TransactionSService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionSServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mql5_background.v1.TransactionSService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionSServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionSService_CreateDeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDealsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionSServiceServer).CreateDeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mql5_background.v1.TransactionSService/CreateDeals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionSServiceServer).CreateDeals(ctx, req.(*CreateDealsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionSService_CreateOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionSServiceServer).CreateOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mql5_background.v1.TransactionSService/CreateOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionSServiceServer).CreateOrders(ctx, req.(*CreateOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionSService_CreatePositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionSServiceServer).CreatePositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mql5_background.v1.TransactionSService/CreatePositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionSServiceServer).CreatePositions(ctx, req.(*CreatePositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionSService_CreateTradeTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTradeTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionSServiceServer).CreateTradeTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mql5_background.v1.TransactionSService/CreateTradeTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionSServiceServer).CreateTradeTransaction(ctx, req.(*CreateTradeTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionSService_ServiceDesc is the grpc.ServiceDesc for TransactionSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mql5_background.v1.TransactionSService",
	HandlerType: (*TransactionSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _TransactionSService_CreateAccount_Handler,
		},
		{
			MethodName: "CreateDeals",
			Handler:    _TransactionSService_CreateDeals_Handler,
		},
		{
			MethodName: "CreateOrders",
			Handler:    _TransactionSService_CreateOrders_Handler,
		},
		{
			MethodName: "CreatePositions",
			Handler:    _TransactionSService_CreatePositions_Handler,
		},
		{
			MethodName: "CreateTradeTransaction",
			Handler:    _TransactionSService_CreateTradeTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
