// Copyright 2021 Sander Ruscigno
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: trade.proto

package v3

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CopyTradeAction int32

const (
	CopyTradeAction__UNDEFINED_00        CopyTradeAction = 0  // Should not be used
	CopyTradeAction_AS_ORIGIN_ORDER      CopyTradeAction = 1  // Order type is the same as the origin order type
	CopyTradeAction_MARKET_ORDER         CopyTradeAction = 2  // Market order
	CopyTradeAction__UNDEFINED_01        CopyTradeAction = 3  // Should not be used
	CopyTradeAction_PENDING_ORDER        CopyTradeAction = 4  // Pending order
	CopyTradeAction__UNDEFINED_05        CopyTradeAction = 5  // Should not be used
	CopyTradeAction__UNDEFINED_06        CopyTradeAction = 6  // Should not be used
	CopyTradeAction__UNDEFINED_07        CopyTradeAction = 7  // Should not be used
	CopyTradeAction_SLTP_ORDER           CopyTradeAction = 8  // Stop Loss or Take Profit order
	CopyTradeAction__UNDEFINED_09        CopyTradeAction = 9  // Should not be used
	CopyTradeAction__UNDEFINED_10        CopyTradeAction = 10 // Should not be used
	CopyTradeAction__UNDEFINED_11        CopyTradeAction = 11 // Should not be used
	CopyTradeAction__UNDEFINED_12        CopyTradeAction = 12 // Should not be used
	CopyTradeAction__UNDEFINED_13        CopyTradeAction = 13 // Should not be used
	CopyTradeAction__UNDEFINED_14        CopyTradeAction = 14 // Should not be used
	CopyTradeAction__UNDEFINED_15        CopyTradeAction = 15 // Should not be used
	CopyTradeAction_PENDING_SLTP_ORDER   CopyTradeAction = 16 // Pending order with Stop Loss and Take Profit
	CopyTradeAction__UNDEFINED_17        CopyTradeAction = 17 // Should not be used
	CopyTradeAction__UNDEFINED_18        CopyTradeAction = 18 // Should not be used
	CopyTradeAction__UNDEFINED_19        CopyTradeAction = 19 // Should not be used
	CopyTradeAction__UNDEFINED_20        CopyTradeAction = 20 // Should not be used
	CopyTradeAction__UNDEFINED_21        CopyTradeAction = 21 // Should not be used
	CopyTradeAction__UNDEFINED_22        CopyTradeAction = 22 // Should not be used
	CopyTradeAction__UNDEFINED_23        CopyTradeAction = 23 // Should not be used
	CopyTradeAction__UNDEFINED_24        CopyTradeAction = 24 // Should not be used
	CopyTradeAction__UNDEFINED_25        CopyTradeAction = 25 // Should not be used
	CopyTradeAction__UNDEFINED_26        CopyTradeAction = 26 // Should not be used
	CopyTradeAction__UNDEFINED_27        CopyTradeAction = 27 // Should not be used
	CopyTradeAction__UNDEFINED_28        CopyTradeAction = 28 // Should not be used
	CopyTradeAction__UNDEFINED_29        CopyTradeAction = 29 // Should not be used
	CopyTradeAction__UNDEFINED_30        CopyTradeAction = 30 // Should not be used
	CopyTradeAction__UNDEFINED_31        CopyTradeAction = 31 // Should not be used
	CopyTradeAction_CLOSE_POSITION_ORDER CopyTradeAction = 32 // Close position order
)

// Enum value maps for CopyTradeAction.
var (
	CopyTradeAction_name = map[int32]string{
		0:  "_UNDEFINED_00",
		1:  "AS_ORIGIN_ORDER",
		2:  "MARKET_ORDER",
		3:  "_UNDEFINED_01",
		4:  "PENDING_ORDER",
		5:  "_UNDEFINED_05",
		6:  "_UNDEFINED_06",
		7:  "_UNDEFINED_07",
		8:  "SLTP_ORDER",
		9:  "_UNDEFINED_09",
		10: "_UNDEFINED_10",
		11: "_UNDEFINED_11",
		12: "_UNDEFINED_12",
		13: "_UNDEFINED_13",
		14: "_UNDEFINED_14",
		15: "_UNDEFINED_15",
		16: "PENDING_SLTP_ORDER",
		17: "_UNDEFINED_17",
		18: "_UNDEFINED_18",
		19: "_UNDEFINED_19",
		20: "_UNDEFINED_20",
		21: "_UNDEFINED_21",
		22: "_UNDEFINED_22",
		23: "_UNDEFINED_23",
		24: "_UNDEFINED_24",
		25: "_UNDEFINED_25",
		26: "_UNDEFINED_26",
		27: "_UNDEFINED_27",
		28: "_UNDEFINED_28",
		29: "_UNDEFINED_29",
		30: "_UNDEFINED_30",
		31: "_UNDEFINED_31",
		32: "CLOSE_POSITION_ORDER",
	}
	CopyTradeAction_value = map[string]int32{
		"_UNDEFINED_00":        0,
		"AS_ORIGIN_ORDER":      1,
		"MARKET_ORDER":         2,
		"_UNDEFINED_01":        3,
		"PENDING_ORDER":        4,
		"_UNDEFINED_05":        5,
		"_UNDEFINED_06":        6,
		"_UNDEFINED_07":        7,
		"SLTP_ORDER":           8,
		"_UNDEFINED_09":        9,
		"_UNDEFINED_10":        10,
		"_UNDEFINED_11":        11,
		"_UNDEFINED_12":        12,
		"_UNDEFINED_13":        13,
		"_UNDEFINED_14":        14,
		"_UNDEFINED_15":        15,
		"PENDING_SLTP_ORDER":   16,
		"_UNDEFINED_17":        17,
		"_UNDEFINED_18":        18,
		"_UNDEFINED_19":        19,
		"_UNDEFINED_20":        20,
		"_UNDEFINED_21":        21,
		"_UNDEFINED_22":        22,
		"_UNDEFINED_23":        23,
		"_UNDEFINED_24":        24,
		"_UNDEFINED_25":        25,
		"_UNDEFINED_26":        26,
		"_UNDEFINED_27":        27,
		"_UNDEFINED_28":        28,
		"_UNDEFINED_29":        29,
		"_UNDEFINED_30":        30,
		"_UNDEFINED_31":        31,
		"CLOSE_POSITION_ORDER": 32,
	}
)

func (x CopyTradeAction) Enum() *CopyTradeAction {
	p := new(CopyTradeAction)
	*p = x
	return p
}

func (x CopyTradeAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CopyTradeAction) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_proto_enumTypes[0].Descriptor()
}

func (CopyTradeAction) Type() protoreflect.EnumType {
	return &file_trade_proto_enumTypes[0]
}

func (x CopyTradeAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CopyTradeAction.Descriptor instead.
func (CopyTradeAction) EnumDescriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{0}
}

// TradeRequestActions: Interaction between the client terminal and a trade server for executing the order placing operation is performed by using trade requests
type TradeRequestActions int32

const (
	TradeRequestActions_UNDEFINED_00_ACTION_TRANSACTION TradeRequestActions = 0  // Should not be used
	TradeRequestActions_TRADE_ACTION_MARKET             TradeRequestActions = 1  // Place a trade order for an immediate execution with the specified parameters (market order)
	TradeRequestActions_UNDEFINED_01_ACTION_TRANSACTION TradeRequestActions = 2  // Should not be used
	TradeRequestActions_UNDEFINED_02_ACTION_TRANSACTION TradeRequestActions = 3  // Should not be used
	TradeRequestActions_UNDEFINED_03_ACTION_TRANSACTION TradeRequestActions = 4  // Should not be used
	TradeRequestActions_TRADE_ACTION_PENDING            TradeRequestActions = 5  // Place a trade order for the execution under specified conditions (pending order)
	TradeRequestActions_TRADE_ACTION_SLTP               TradeRequestActions = 6  // Modify Stop Loss and Take Profit values of an opened position
	TradeRequestActions_TRADE_ACTION_MODIFY             TradeRequestActions = 7  // Modify the parameters of the order placed previously
	TradeRequestActions_TRADE_ACTION_REMOVE             TradeRequestActions = 8  // Delete the pending order placed previously
	TradeRequestActions_UNDEFINED_04_ACTION_TRANSACTION TradeRequestActions = 9  // Should not be used
	TradeRequestActions_TRADE_ACTION_CLOSE_BY           TradeRequestActions = 10 // Close a position by an opposite one
)

// Enum value maps for TradeRequestActions.
var (
	TradeRequestActions_name = map[int32]string{
		0:  "UNDEFINED_00_ACTION_TRANSACTION",
		1:  "TRADE_ACTION_MARKET",
		2:  "UNDEFINED_01_ACTION_TRANSACTION",
		3:  "UNDEFINED_02_ACTION_TRANSACTION",
		4:  "UNDEFINED_03_ACTION_TRANSACTION",
		5:  "TRADE_ACTION_PENDING",
		6:  "TRADE_ACTION_SLTP",
		7:  "TRADE_ACTION_MODIFY",
		8:  "TRADE_ACTION_REMOVE",
		9:  "UNDEFINED_04_ACTION_TRANSACTION",
		10: "TRADE_ACTION_CLOSE_BY",
	}
	TradeRequestActions_value = map[string]int32{
		"UNDEFINED_00_ACTION_TRANSACTION": 0,
		"TRADE_ACTION_MARKET":             1,
		"UNDEFINED_01_ACTION_TRANSACTION": 2,
		"UNDEFINED_02_ACTION_TRANSACTION": 3,
		"UNDEFINED_03_ACTION_TRANSACTION": 4,
		"TRADE_ACTION_PENDING":            5,
		"TRADE_ACTION_SLTP":               6,
		"TRADE_ACTION_MODIFY":             7,
		"TRADE_ACTION_REMOVE":             8,
		"UNDEFINED_04_ACTION_TRANSACTION": 9,
		"TRADE_ACTION_CLOSE_BY":           10,
	}
)

func (x TradeRequestActions) Enum() *TradeRequestActions {
	p := new(TradeRequestActions)
	*p = x
	return p
}

func (x TradeRequestActions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeRequestActions) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_proto_enumTypes[1].Descriptor()
}

func (TradeRequestActions) Type() protoreflect.EnumType {
	return &file_trade_proto_enumTypes[1]
}

func (x TradeRequestActions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeRequestActions.Descriptor instead.
func (TradeRequestActions) EnumDescriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{1}
}

// When performing some definite actions on a trade account, its state changes.
type TradeTransactionType int32

const (
	TradeTransactionType_TRADE_TRANSACTION_ORDER_ADD          TradeTransactionType = 0  // Adding a new open order.
	TradeTransactionType_TRADE_TRANSACTION_ORDER_UPDATE       TradeTransactionType = 1  // Updating an open order. The updates include not only evident changes from the client terminal or a trade server sides but also changes of an order state when setting it (for example, transition from ORDER_STATE_STARTED to ORDER_STATE_PLACED or from ORDER_STATE_PLACED to ORDER_STATE_PARTIAL, etc.).
	TradeTransactionType_TRADE_TRANSACTION_ORDER_DELETE       TradeTransactionType = 2  // Removing an order from the list of the open ones. An order can be deleted from the open ones as a result of setting an appropriate request or execution (filling) and moving to the history.
	TradeTransactionType_TRADE_TRANSACTION_HISTORY_ADD        TradeTransactionType = 3  // Adding an order to the history as a result of execution or cancellation.
	TradeTransactionType_TRADE_TRANSACTION_HISTORY_UPDATE     TradeTransactionType = 4  // Changing an order located in the orders history. This type is provided for enhancing functionality on a trade server side.
	TradeTransactionType_TRADE_TRANSACTION_HISTORY_DELETE     TradeTransactionType = 5  // Deleting an order from the orders history. This type is provided for enhancing functionality on a trade server side.
	TradeTransactionType_TRADE_TRANSACTION_TRANSACTION_ADD    TradeTransactionType = 6  // Adding a transaction to the history. The action is performed as a result of an order execution or performing operations with an account balance.
	TradeTransactionType_TRADE_TRANSACTION_TRANSACTION_UPDATE TradeTransactionType = 7  // Updating a transaction in the history. There may be cases when a previously executed transaction is changed on a server. For example, a transaction has been changed in an external trading system (exchange) where it was previously transferred by a broker.
	TradeTransactionType_TRADE_TRANSACTION_TRANSACTION_DELETE TradeTransactionType = 8  // Deleting a transaction from the history. There may be cases when a previously executed transaction is deleted from a server. For example, a transaction has been deleted in an external trading system (exchange) where it was previously transferred by a broker.
	TradeTransactionType_TRADE_TRANSACTION_POSITION           TradeTransactionType = 9  // Changing a position not related to a transaction execution. This type of transaction shows that a position has been changed on a trade server side. Position volume, open price, Stop Loss and Take Profit levels can be changed. Data on changes are submitted in MqlTradeTransaction structure via OnTradeTransaction handler. Position change (adding, changing or closing), as a result of a transaction execution, does not lead to the occurrence of TRADE_TRANSACTION_POSITION transaction.
	TradeTransactionType_TRADE_TRANSACTION_REQUEST            TradeTransactionType = 10 // Notification of the fact that a trade request has been processed by a server and processing result has been received. Only type field (trade transaction type) must be analyzed for such transactions in MqlTradeTransaction structure. The second and third parameters of OnTradeTransaction (request and result) must be analyzed for additional data.
)

// Enum value maps for TradeTransactionType.
var (
	TradeTransactionType_name = map[int32]string{
		0:  "TRADE_TRANSACTION_ORDER_ADD",
		1:  "TRADE_TRANSACTION_ORDER_UPDATE",
		2:  "TRADE_TRANSACTION_ORDER_DELETE",
		3:  "TRADE_TRANSACTION_HISTORY_ADD",
		4:  "TRADE_TRANSACTION_HISTORY_UPDATE",
		5:  "TRADE_TRANSACTION_HISTORY_DELETE",
		6:  "TRADE_TRANSACTION_TRANSACTION_ADD",
		7:  "TRADE_TRANSACTION_TRANSACTION_UPDATE",
		8:  "TRADE_TRANSACTION_TRANSACTION_DELETE",
		9:  "TRADE_TRANSACTION_POSITION",
		10: "TRADE_TRANSACTION_REQUEST",
	}
	TradeTransactionType_value = map[string]int32{
		"TRADE_TRANSACTION_ORDER_ADD":          0,
		"TRADE_TRANSACTION_ORDER_UPDATE":       1,
		"TRADE_TRANSACTION_ORDER_DELETE":       2,
		"TRADE_TRANSACTION_HISTORY_ADD":        3,
		"TRADE_TRANSACTION_HISTORY_UPDATE":     4,
		"TRADE_TRANSACTION_HISTORY_DELETE":     5,
		"TRADE_TRANSACTION_TRANSACTION_ADD":    6,
		"TRADE_TRANSACTION_TRANSACTION_UPDATE": 7,
		"TRADE_TRANSACTION_TRANSACTION_DELETE": 8,
		"TRADE_TRANSACTION_POSITION":           9,
		"TRADE_TRANSACTION_REQUEST":            10,
	}
)

func (x TradeTransactionType) Enum() *TradeTransactionType {
	p := new(TradeTransactionType)
	*p = x
	return p
}

func (x TradeTransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeTransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_proto_enumTypes[2].Descriptor()
}

func (TradeTransactionType) Type() protoreflect.EnumType {
	return &file_trade_proto_enumTypes[2]
}

func (x TradeTransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeTransactionType.Descriptor instead.
func (TradeTransactionType) EnumDescriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{2}
}

// TradeTransaction: Structure of a Trade Transaction
type TradeTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       int64                  `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                                       // Account ID
	OrderId         int64                  `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                             // Order ticket
	TransactionId   int64                  `protobuf:"varint,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`                                           // Transaction ticket
	PositionId      int64                  `protobuf:"varint,4,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`                                                    // Position ticket
	Symbol          string                 `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                                               // Trade symbol name
	TradeType       TradeTransactionType   `protobuf:"varint,6,opt,name=trade_type,json=tradeType,proto3,enum=tickerbeats.v3.TradeTransactionType" json:"trade_type,omitempty"`              // Trade transaction type
	OrderType       OrderType              `protobuf:"varint,7,opt,name=order_type,json=orderType,proto3,enum=tickerbeats.v3.OrderType" json:"order_type,omitempty"`                         // Order type
	OrderState      OrderState             `protobuf:"varint,8,opt,name=order_state,json=orderState,proto3,enum=tickerbeats.v3.OrderState" json:"order_state,omitempty"`                     // Order state
	TransactionType TransactionType        `protobuf:"varint,9,opt,name=transaction_type,json=transactionType,proto3,enum=tickerbeats.v3.TransactionType" json:"transaction_type,omitempty"` // Transaction type
	TimeType        OrderTypeTime          `protobuf:"varint,10,opt,name=time_type,json=timeType,proto3,enum=tickerbeats.v3.OrderTypeTime" json:"time_type,omitempty"`                       // Order type by action period
	TimeExpiration  *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=time_expiration,json=timeExpiration,proto3" json:"time_expiration,omitempty"`                                        // Order expiration time
	Price           float64                `protobuf:"fixed64,12,opt,name=price,proto3" json:"price,omitempty"`                                                                              // Price
	PriceTrigger    float64                `protobuf:"fixed64,13,opt,name=price_trigger,json=priceTrigger,proto3" json:"price_trigger,omitempty"`                                            // Stop limit order activation price
	PriceStopLoss   float64                `protobuf:"fixed64,14,opt,name=price_stop_loss,json=priceStopLoss,proto3" json:"price_stop_loss,omitempty"`                                       // Stop Loss level
	PriceTakeProfit float64                `protobuf:"fixed64,15,opt,name=price_take_profit,json=priceTakeProfit,proto3" json:"price_take_profit,omitempty"`                                 // Take Profit level
	Volume          float64                `protobuf:"fixed64,16,opt,name=volume,proto3" json:"volume,omitempty"`                                                                            // Volume in lots
	PositionBy      int64                  `protobuf:"varint,17,opt,name=position_by,json=positionBy,proto3" json:"position_by,omitempty"`                                                   // Ticket of an opposite position
	Reason          TransactionReason      `protobuf:"varint,18,opt,name=reason,proto3,enum=tickerbeats.v3.TransactionReason" json:"reason,omitempty"`                                       // Reason for the transaction
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,97,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                       // Timestamp of creation
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,98,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                       // Timestamp of last update
}

func (x *TradeTransaction) Reset() {
	*x = TradeTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeTransaction) ProtoMessage() {}

func (x *TradeTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeTransaction.ProtoReflect.Descriptor instead.
func (*TradeTransaction) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{0}
}

func (x *TradeTransaction) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *TradeTransaction) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *TradeTransaction) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *TradeTransaction) GetPositionId() int64 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

func (x *TradeTransaction) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TradeTransaction) GetTradeType() TradeTransactionType {
	if x != nil {
		return x.TradeType
	}
	return TradeTransactionType_TRADE_TRANSACTION_ORDER_ADD
}

func (x *TradeTransaction) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_BUY
}

func (x *TradeTransaction) GetOrderState() OrderState {
	if x != nil {
		return x.OrderState
	}
	return OrderState_ORDER_STATE_STARTED
}

func (x *TradeTransaction) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_TRANSACTION_TYPE_BUY
}

func (x *TradeTransaction) GetTimeType() OrderTypeTime {
	if x != nil {
		return x.TimeType
	}
	return OrderTypeTime_ORDER_TIME_GTC
}

func (x *TradeTransaction) GetTimeExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeExpiration
	}
	return nil
}

func (x *TradeTransaction) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeTransaction) GetPriceTrigger() float64 {
	if x != nil {
		return x.PriceTrigger
	}
	return 0
}

func (x *TradeTransaction) GetPriceStopLoss() float64 {
	if x != nil {
		return x.PriceStopLoss
	}
	return 0
}

func (x *TradeTransaction) GetPriceTakeProfit() float64 {
	if x != nil {
		return x.PriceTakeProfit
	}
	return 0
}

func (x *TradeTransaction) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *TradeTransaction) GetPositionBy() int64 {
	if x != nil {
		return x.PositionBy
	}
	return 0
}

func (x *TradeTransaction) GetReason() TransactionReason {
	if x != nil {
		return x.Reason
	}
	return TransactionReason_TRANSACTION_REASON_CLIENT
}

func (x *TradeTransaction) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TradeTransaction) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// TradeRequest: The Structure of a Trade Request
type TradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      int64                  `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                             // Account ID
	OrderId        int64                  `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                   // Order ticket
	PositionId     int64                  `protobuf:"varint,3,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`                                          // TradeTransaction ticket
	Action         TradeRequestActions    `protobuf:"varint,4,opt,name=action,proto3,enum=tickerbeats.v3.TradeRequestActions" json:"action,omitempty"`                            // Trade operation type
	Magic          int64                  `protobuf:"varint,5,opt,name=magic,proto3" json:"magic,omitempty"`                                                                      // Expert Advisor ID (magic number)
	Symbol         string                 `protobuf:"bytes,6,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                                     // Trade symbol
	Volume         float64                `protobuf:"fixed64,7,opt,name=volume,proto3" json:"volume,omitempty"`                                                                   // Requested volume for a transaction in lots
	Price          float64                `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`                                                                     // Price
	StopLimit      float64                `protobuf:"fixed64,9,opt,name=stop_limit,json=stopLimit,proto3" json:"stop_limit,omitempty"`                                            // Stop Limit level of the order
	StopLoss       float64                `protobuf:"fixed64,10,opt,name=stop_loss,json=stopLoss,proto3" json:"stop_loss,omitempty"`                                              // Stop Loss level of the order
	TakeProfit     float64                `protobuf:"fixed64,11,opt,name=take_profit,json=takeProfit,proto3" json:"take_profit,omitempty"`                                        // Take Profit level of the order
	Deviation      int64                  `protobuf:"varint,12,opt,name=deviation,proto3" json:"deviation,omitempty"`                                                             // The maximal price deviation, specified in points, pip, cent, etc.
	OrderType      OrderType              `protobuf:"varint,13,opt,name=order_type,json=orderType,proto3,enum=tickerbeats.v3.OrderType" json:"order_type,omitempty"`              // Order type
	TypeFilling    OrderFillingType       `protobuf:"varint,14,opt,name=type_filling,json=typeFilling,proto3,enum=tickerbeats.v3.OrderFillingType" json:"type_filling,omitempty"` // Order execution type
	TypeTime       OrderTypeTime          `protobuf:"varint,15,opt,name=type_time,json=typeTime,proto3,enum=tickerbeats.v3.OrderTypeTime" json:"type_time,omitempty"`             // Order expiration type
	TimeExpiration *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=time_expiration,json=timeExpiration,proto3" json:"time_expiration,omitempty"`                              // Order expiration time (for the orders of ORDER_TIME_SPECIFIED type)
	Comment        string                 `protobuf:"bytes,17,opt,name=comment,proto3" json:"comment,omitempty"`                                                                  // Order comment
	PositionBy     int64                  `protobuf:"varint,18,opt,name=position_by,json=positionBy,proto3" json:"position_by,omitempty"`                                         // The ticket of an opposite tradetransaction
	Reason         TransactionReason      `protobuf:"varint,19,opt,name=reason,proto3,enum=tickerbeats.v3.TransactionReason" json:"reason,omitempty"`                             // Reason for the transaction
	Entry          TransactionEntry       `protobuf:"varint,20,opt,name=entry,proto3,enum=tickerbeats.v3.TransactionEntry" json:"entry,omitempty"`                                // Transaction entry - entry in, entry out, reverse
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,97,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                             // Timestamp of creation
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,98,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                             // Timestamp of last update
}

func (x *TradeRequest) Reset() {
	*x = TradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRequest) ProtoMessage() {}

func (x *TradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRequest.ProtoReflect.Descriptor instead.
func (*TradeRequest) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{1}
}

func (x *TradeRequest) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *TradeRequest) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *TradeRequest) GetPositionId() int64 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

func (x *TradeRequest) GetAction() TradeRequestActions {
	if x != nil {
		return x.Action
	}
	return TradeRequestActions_UNDEFINED_00_ACTION_TRANSACTION
}

func (x *TradeRequest) GetMagic() int64 {
	if x != nil {
		return x.Magic
	}
	return 0
}

func (x *TradeRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TradeRequest) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *TradeRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeRequest) GetStopLimit() float64 {
	if x != nil {
		return x.StopLimit
	}
	return 0
}

func (x *TradeRequest) GetStopLoss() float64 {
	if x != nil {
		return x.StopLoss
	}
	return 0
}

func (x *TradeRequest) GetTakeProfit() float64 {
	if x != nil {
		return x.TakeProfit
	}
	return 0
}

func (x *TradeRequest) GetDeviation() int64 {
	if x != nil {
		return x.Deviation
	}
	return 0
}

func (x *TradeRequest) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_BUY
}

func (x *TradeRequest) GetTypeFilling() OrderFillingType {
	if x != nil {
		return x.TypeFilling
	}
	return OrderFillingType_ORDER_FILLING_FOK
}

func (x *TradeRequest) GetTypeTime() OrderTypeTime {
	if x != nil {
		return x.TypeTime
	}
	return OrderTypeTime_ORDER_TIME_GTC
}

func (x *TradeRequest) GetTimeExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeExpiration
	}
	return nil
}

func (x *TradeRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TradeRequest) GetPositionBy() int64 {
	if x != nil {
		return x.PositionBy
	}
	return 0
}

func (x *TradeRequest) GetReason() TransactionReason {
	if x != nil {
		return x.Reason
	}
	return TransactionReason_TRANSACTION_REASON_CLIENT
}

func (x *TradeRequest) GetEntry() TransactionEntry {
	if x != nil {
		return x.Entry
	}
	return TransactionEntry_TRANSACTION_ENTRY_IN
}

func (x *TradeRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TradeRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// TradeResult: The Structure of a Trade Result
type TradeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       int64                  `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                    // Account ID
	OrderId         int64                  `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                          // Order ticket, if it is placed
	TransactionId   int64                  `protobuf:"varint,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`        // Transaction ticket, if it is performed
	Retcode         uint32                 `protobuf:"varint,4,opt,name=retcode,proto3" json:"retcode,omitempty"`                                         // Operation return code
	Volume          float64                `protobuf:"fixed64,5,opt,name=volume,proto3" json:"volume,omitempty"`                                          // Transaction volume, confirmed by broker
	Price           float64                `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`                                            // Transaction price, confirmed by broker
	Bid             float64                `protobuf:"fixed64,7,opt,name=bid,proto3" json:"bid,omitempty"`                                                // Current Bid price
	Ask             float64                `protobuf:"fixed64,8,opt,name=ask,proto3" json:"ask,omitempty"`                                                // Current Ask price
	Comment         string                 `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`                                          // Broker comment to operation (by default it is filled by description of trade server return code)
	RequestId       uint32                 `protobuf:"varint,10,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`                   // Request ID set by the sender during the dispatch
	RetcodeExternal uint32                 `protobuf:"varint,11,opt,name=retcode_external,json=retcodeExternal,proto3" json:"retcode_external,omitempty"` // Return code of an external trading system
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,97,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                    // Timestamp of creation
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,98,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                    // Timestamp of last update
}

func (x *TradeResult) Reset() {
	*x = TradeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeResult) ProtoMessage() {}

func (x *TradeResult) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeResult.ProtoReflect.Descriptor instead.
func (*TradeResult) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{2}
}

func (x *TradeResult) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *TradeResult) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *TradeResult) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *TradeResult) GetRetcode() uint32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *TradeResult) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *TradeResult) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeResult) GetBid() float64 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *TradeResult) GetAsk() float64 {
	if x != nil {
		return x.Ask
	}
	return 0
}

func (x *TradeResult) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TradeResult) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *TradeResult) GetRetcodeExternal() uint32 {
	if x != nil {
		return x.RetcodeExternal
	}
	return 0
}

func (x *TradeResult) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TradeResult) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_trade_proto protoreflect.FileDescriptor

var file_trade_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x1a, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae,
	0x07, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x43, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2e,
	0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62,
	0x65, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2e,
	0x76, 0x33, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61, 0x74,
	0x73, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x6c, 0x6f, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x39,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xa1, 0x07, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61, 0x74,
	0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x33,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x3a,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2e,
	0x76, 0x33, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61,
	0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x61, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xb4, 0x03, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x62, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x61, 0x73, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x62, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2a, 0x8e, 0x05, 0x0a, 0x0f, 0x43,
	0x6f, 0x70, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11,
	0x0a, 0x0d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x30, 0x30, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x53, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x30, 0x31, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x11,
	0x0a, 0x0d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x30, 0x35, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f,
	0x30, 0x36, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x5f, 0x30, 0x37, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4c, 0x54, 0x50, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x5f, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x30, 0x39, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x10, 0x0a, 0x12, 0x11, 0x0a,
	0x0d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x31, 0x31, 0x10, 0x0b,
	0x12, 0x11, 0x0a, 0x0d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x31,
	0x32, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x44, 0x5f, 0x31, 0x33, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x5f, 0x31, 0x34, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x31, 0x35, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4c, 0x54, 0x50, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x5f, 0x31, 0x37, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x5f, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x31, 0x38, 0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x31, 0x39, 0x10, 0x13, 0x12, 0x11, 0x0a,
	0x0d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x32, 0x30, 0x10, 0x14,
	0x12, 0x11, 0x0a, 0x0d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x32,
	0x31, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x44, 0x5f, 0x32, 0x32, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x5f, 0x32, 0x33, 0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x32, 0x34, 0x10, 0x18, 0x12, 0x11, 0x0a, 0x0d,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x32, 0x35, 0x10, 0x19, 0x12,
	0x11, 0x0a, 0x0d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x32, 0x36,
	0x10, 0x1a, 0x12, 0x11, 0x0a, 0x0d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x5f, 0x32, 0x37, 0x10, 0x1b, 0x12, 0x11, 0x0a, 0x0d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x5f, 0x32, 0x38, 0x10, 0x1c, 0x12, 0x11, 0x0a, 0x0d, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x32, 0x39, 0x10, 0x1d, 0x12, 0x11, 0x0a, 0x0d, 0x5f,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x33, 0x30, 0x10, 0x1e, 0x12, 0x11,
	0x0a, 0x0d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x33, 0x31, 0x10,
	0x1f, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x20, 0x2a, 0xe5, 0x02, 0x0a, 0x13,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x5f, 0x30, 0x30, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x30,
	0x31, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x5f, 0x30, 0x32, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x30, 0x33, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4c, 0x54, 0x50, 0x10,
	0x06, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x5f, 0x30, 0x34, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x42,
	0x59, 0x10, 0x0a, 0x2a, 0xa8, 0x03, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a,
	0x1e, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49,
	0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x24,
	0x0a, 0x20, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x08, 0x12,
	0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12,
	0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0a, 0x42, 0x11,
	0x5a, 0x0f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2d, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2f, 0x76,
	0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trade_proto_rawDescOnce sync.Once
	file_trade_proto_rawDescData = file_trade_proto_rawDesc
)

func file_trade_proto_rawDescGZIP() []byte {
	file_trade_proto_rawDescOnce.Do(func() {
		file_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_trade_proto_rawDescData)
	})
	return file_trade_proto_rawDescData
}

var file_trade_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_trade_proto_goTypes = []interface{}{
	(CopyTradeAction)(0),          // 0: tickerbeats.v3.CopyTradeAction
	(TradeRequestActions)(0),      // 1: tickerbeats.v3.TradeRequestActions
	(TradeTransactionType)(0),     // 2: tickerbeats.v3.TradeTransactionType
	(*TradeTransaction)(nil),      // 3: tickerbeats.v3.TradeTransaction
	(*TradeRequest)(nil),          // 4: tickerbeats.v3.TradeRequest
	(*TradeResult)(nil),           // 5: tickerbeats.v3.TradeResult
	(OrderType)(0),                // 6: tickerbeats.v3.OrderType
	(OrderState)(0),               // 7: tickerbeats.v3.OrderState
	(TransactionType)(0),          // 8: tickerbeats.v3.TransactionType
	(OrderTypeTime)(0),            // 9: tickerbeats.v3.OrderTypeTime
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
	(TransactionReason)(0),        // 11: tickerbeats.v3.TransactionReason
	(OrderFillingType)(0),         // 12: tickerbeats.v3.OrderFillingType
	(TransactionEntry)(0),         // 13: tickerbeats.v3.TransactionEntry
}
var file_trade_proto_depIdxs = []int32{
	2,  // 0: tickerbeats.v3.TradeTransaction.trade_type:type_name -> tickerbeats.v3.TradeTransactionType
	6,  // 1: tickerbeats.v3.TradeTransaction.order_type:type_name -> tickerbeats.v3.OrderType
	7,  // 2: tickerbeats.v3.TradeTransaction.order_state:type_name -> tickerbeats.v3.OrderState
	8,  // 3: tickerbeats.v3.TradeTransaction.transaction_type:type_name -> tickerbeats.v3.TransactionType
	9,  // 4: tickerbeats.v3.TradeTransaction.time_type:type_name -> tickerbeats.v3.OrderTypeTime
	10, // 5: tickerbeats.v3.TradeTransaction.time_expiration:type_name -> google.protobuf.Timestamp
	11, // 6: tickerbeats.v3.TradeTransaction.reason:type_name -> tickerbeats.v3.TransactionReason
	10, // 7: tickerbeats.v3.TradeTransaction.created_at:type_name -> google.protobuf.Timestamp
	10, // 8: tickerbeats.v3.TradeTransaction.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 9: tickerbeats.v3.TradeRequest.action:type_name -> tickerbeats.v3.TradeRequestActions
	6,  // 10: tickerbeats.v3.TradeRequest.order_type:type_name -> tickerbeats.v3.OrderType
	12, // 11: tickerbeats.v3.TradeRequest.type_filling:type_name -> tickerbeats.v3.OrderFillingType
	9,  // 12: tickerbeats.v3.TradeRequest.type_time:type_name -> tickerbeats.v3.OrderTypeTime
	10, // 13: tickerbeats.v3.TradeRequest.time_expiration:type_name -> google.protobuf.Timestamp
	11, // 14: tickerbeats.v3.TradeRequest.reason:type_name -> tickerbeats.v3.TransactionReason
	13, // 15: tickerbeats.v3.TradeRequest.entry:type_name -> tickerbeats.v3.TransactionEntry
	10, // 16: tickerbeats.v3.TradeRequest.created_at:type_name -> google.protobuf.Timestamp
	10, // 17: tickerbeats.v3.TradeRequest.updated_at:type_name -> google.protobuf.Timestamp
	10, // 18: tickerbeats.v3.TradeResult.created_at:type_name -> google.protobuf.Timestamp
	10, // 19: tickerbeats.v3.TradeResult.updated_at:type_name -> google.protobuf.Timestamp
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_trade_proto_init() }
func file_trade_proto_init() {
	if File_trade_proto != nil {
		return
	}
	file_transaction_proto_init()
	file_order_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_trade_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trade_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trade_proto_goTypes,
		DependencyIndexes: file_trade_proto_depIdxs,
		EnumInfos:         file_trade_proto_enumTypes,
		MessageInfos:      file_trade_proto_msgTypes,
	}.Build()
	File_trade_proto = out.File
	file_trade_proto_rawDesc = nil
	file_trade_proto_goTypes = nil
	file_trade_proto_depIdxs = nil
}
