// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: account.proto

package v3

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AccountTradeMode represents the modes an account could have
type AccountTradeMode int32

const (
	AccountTradeMode_ACCOUNT_TRADE_MODE_DEMO     AccountTradeMode = 0 //Demo account
	AccountTradeMode_ACCOUNT_TRADE_MODE_CONTEST  AccountTradeMode = 1 //Contest account
	AccountTradeMode_ACCOUNT_TRADE_MODE_REAL     AccountTradeMode = 2 //Real account
	AccountTradeMode_ACCOUNT_TRADE_MODE_INTERNAL AccountTradeMode = 3 //Demo account ran internally by our own system
)

// Enum value maps for AccountTradeMode.
var (
	AccountTradeMode_name = map[int32]string{
		0: "ACCOUNT_TRADE_MODE_DEMO",
		1: "ACCOUNT_TRADE_MODE_CONTEST",
		2: "ACCOUNT_TRADE_MODE_REAL",
		3: "ACCOUNT_TRADE_MODE_INTERNAL",
	}
	AccountTradeMode_value = map[string]int32{
		"ACCOUNT_TRADE_MODE_DEMO":     0,
		"ACCOUNT_TRADE_MODE_CONTEST":  1,
		"ACCOUNT_TRADE_MODE_REAL":     2,
		"ACCOUNT_TRADE_MODE_INTERNAL": 3,
	}
)

func (x AccountTradeMode) Enum() *AccountTradeMode {
	p := new(AccountTradeMode)
	*p = x
	return p
}

func (x AccountTradeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountTradeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[0].Descriptor()
}

func (AccountTradeMode) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[0]
}

func (x AccountTradeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountTradeMode.Descriptor instead.
func (AccountTradeMode) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{0}
}

// AccountStopoutMode: Mode for setting the minimal allowed margin
type AccountStopoutMode int32

const (
	AccountStopoutMode_ACCOUNT_STOPOUT_MODE_PERCENT AccountStopoutMode = 0 //Account stop out mode in percents
	AccountStopoutMode_ACCOUNT_STOPOUT_MODE_MONEY   AccountStopoutMode = 1 //Account stop out mode in money
)

// Enum value maps for AccountStopoutMode.
var (
	AccountStopoutMode_name = map[int32]string{
		0: "ACCOUNT_STOPOUT_MODE_PERCENT",
		1: "ACCOUNT_STOPOUT_MODE_MONEY",
	}
	AccountStopoutMode_value = map[string]int32{
		"ACCOUNT_STOPOUT_MODE_PERCENT": 0,
		"ACCOUNT_STOPOUT_MODE_MONEY":   1,
	}
)

func (x AccountStopoutMode) Enum() *AccountStopoutMode {
	p := new(AccountStopoutMode)
	*p = x
	return p
}

func (x AccountStopoutMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountStopoutMode) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[1].Descriptor()
}

func (AccountStopoutMode) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[1]
}

func (x AccountStopoutMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountStopoutMode.Descriptor instead.
func (AccountStopoutMode) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{1}
}

// AccountStopoutMode: Margin calculation mode
type AccountMarginMode int32

const (
	AccountMarginMode_ACCOUNT_MARGIN_MODE_RETAIL_NETTING AccountMarginMode = 0 //Used for the OTC markets to interpret positions in the "netting" mode (only one position can exist for one symbol).
	AccountMarginMode_ACCOUNT_MARGIN_MODE_EXCHANGE       AccountMarginMode = 1 //Used for the exchange markets.
	AccountMarginMode_ACCOUNT_MARGIN_MODE_RETAIL_HEDGING AccountMarginMode = 2 //Used for the exchange markets where individual positions are possible (hedging, multiple positions can exist for one symbol).
)

// Enum value maps for AccountMarginMode.
var (
	AccountMarginMode_name = map[int32]string{
		0: "ACCOUNT_MARGIN_MODE_RETAIL_NETTING",
		1: "ACCOUNT_MARGIN_MODE_EXCHANGE",
		2: "ACCOUNT_MARGIN_MODE_RETAIL_HEDGING",
	}
	AccountMarginMode_value = map[string]int32{
		"ACCOUNT_MARGIN_MODE_RETAIL_NETTING": 0,
		"ACCOUNT_MARGIN_MODE_EXCHANGE":       1,
		"ACCOUNT_MARGIN_MODE_RETAIL_HEDGING": 2,
	}
)

func (x AccountMarginMode) Enum() *AccountMarginMode {
	p := new(AccountMarginMode)
	*p = x
	return p
}

func (x AccountMarginMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountMarginMode) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[2].Descriptor()
}

func (AccountMarginMode) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[2]
}

func (x AccountMarginMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountMarginMode.Descriptor instead.
func (AccountMarginMode) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{2}
}

// AccountExchange: Exchange account is associated with
type AccountExchange int32

const (
	AccountExchange_ACCOUNT_EXCHANGE_BINANCE AccountExchange = 0
	AccountExchange_ACCOUNT_EXCHANGE_DYDX    AccountExchange = 1
	AccountExchange_ACCOUNT_EXCHANGE_MEXC    AccountExchange = 2
)

// Enum value maps for AccountExchange.
var (
	AccountExchange_name = map[int32]string{
		0: "ACCOUNT_EXCHANGE_BINANCE",
		1: "ACCOUNT_EXCHANGE_DYDX",
		2: "ACCOUNT_EXCHANGE_MEXC",
	}
	AccountExchange_value = map[string]int32{
		"ACCOUNT_EXCHANGE_BINANCE": 0,
		"ACCOUNT_EXCHANGE_DYDX":    1,
		"ACCOUNT_EXCHANGE_MEXC":    2,
	}
)

func (x AccountExchange) Enum() *AccountExchange {
	p := new(AccountExchange)
	*p = x
	return p
}

func (x AccountExchange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountExchange) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[3].Descriptor()
}

func (AccountExchange) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[3]
}

func (x AccountExchange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountExchange.Descriptor instead.
func (AccountExchange) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{3}
}

// Account: Account Properties
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId           int64              `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Name                string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description         string             `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	TradeMode           AccountTradeMode   `protobuf:"varint,4,opt,name=trade_mode,json=tradeMode,proto3,enum=tickerbeats.v3.AccountTradeMode" json:"trade_mode,omitempty"`
	Leverage            int64              `protobuf:"varint,5,opt,name=leverage,proto3" json:"leverage,omitempty"`
	MarginMode          AccountMarginMode  `protobuf:"varint,6,opt,name=margin_mode,json=marginMode,proto3,enum=tickerbeats.v3.AccountMarginMode" json:"margin_mode,omitempty"`
	StopoutMode         AccountStopoutMode `protobuf:"varint,7,opt,name=stopout_mode,json=stopoutMode,proto3,enum=tickerbeats.v3.AccountStopoutMode" json:"stopout_mode,omitempty"`
	TradeAllowed        bool               `protobuf:"varint,8,opt,name=trade_allowed,json=tradeAllowed,proto3" json:"trade_allowed,omitempty"`
	TradeExpert         bool               `protobuf:"varint,9,opt,name=trade_expert,json=tradeExpert,proto3" json:"trade_expert,omitempty"`
	Exchange            AccountExchange    `protobuf:"varint,10,opt,name=exchange,proto3,enum=tickerbeats.v3.AccountExchange" json:"exchange,omitempty"`
	Server              string             `protobuf:"bytes,11,opt,name=server,proto3" json:"server,omitempty"`
	Currency            string             `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
	Company             string             `protobuf:"bytes,13,opt,name=company,proto3" json:"company,omitempty"`
	Active              bool               `protobuf:"varint,14,opt,name=active,proto3" json:"active,omitempty"`
	TimeTradeServer     int64              `protobuf:"varint,15,opt,name=TimeTradeServer,proto3" json:"TimeTradeServer,omitempty"`
	TimeCurrent         int64              `protobuf:"varint,16,opt,name=TimeCurrent,proto3" json:"TimeCurrent,omitempty"`
	TimeLocal           int64              `protobuf:"varint,17,opt,name=TimeLocal,proto3" json:"TimeLocal,omitempty"`
	TimeGMT             int64              `protobuf:"varint,18,opt,name=TimeGMT,proto3" json:"TimeGMT,omitempty"`
	LocalTimeGMTOffset  int64              `protobuf:"varint,19,opt,name=LocalTimeGMTOffset,proto3" json:"LocalTimeGMTOffset,omitempty"`
	ServerTimeGMTOffset int64              `protobuf:"varint,20,opt,name=ServerTimeGMTOffset,proto3" json:"ServerTimeGMTOffset,omitempty"`
	Created             int64              `protobuf:"varint,21,opt,name=created,proto3" json:"created,omitempty"`
	Updated             int64              `protobuf:"varint,22,opt,name=updated,proto3" json:"updated,omitempty"`
	Deleted             int64              `protobuf:"varint,23,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{0}
}

func (x *Account) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Account) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Account) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Account) GetTradeMode() AccountTradeMode {
	if x != nil {
		return x.TradeMode
	}
	return AccountTradeMode_ACCOUNT_TRADE_MODE_DEMO
}

func (x *Account) GetLeverage() int64 {
	if x != nil {
		return x.Leverage
	}
	return 0
}

func (x *Account) GetMarginMode() AccountMarginMode {
	if x != nil {
		return x.MarginMode
	}
	return AccountMarginMode_ACCOUNT_MARGIN_MODE_RETAIL_NETTING
}

func (x *Account) GetStopoutMode() AccountStopoutMode {
	if x != nil {
		return x.StopoutMode
	}
	return AccountStopoutMode_ACCOUNT_STOPOUT_MODE_PERCENT
}

func (x *Account) GetTradeAllowed() bool {
	if x != nil {
		return x.TradeAllowed
	}
	return false
}

func (x *Account) GetTradeExpert() bool {
	if x != nil {
		return x.TradeExpert
	}
	return false
}

func (x *Account) GetExchange() AccountExchange {
	if x != nil {
		return x.Exchange
	}
	return AccountExchange_ACCOUNT_EXCHANGE_BINANCE
}

func (x *Account) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *Account) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Account) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *Account) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Account) GetTimeTradeServer() int64 {
	if x != nil {
		return x.TimeTradeServer
	}
	return 0
}

func (x *Account) GetTimeCurrent() int64 {
	if x != nil {
		return x.TimeCurrent
	}
	return 0
}

func (x *Account) GetTimeLocal() int64 {
	if x != nil {
		return x.TimeLocal
	}
	return 0
}

func (x *Account) GetTimeGMT() int64 {
	if x != nil {
		return x.TimeGMT
	}
	return 0
}

func (x *Account) GetLocalTimeGMTOffset() int64 {
	if x != nil {
		return x.LocalTimeGMTOffset
	}
	return 0
}

func (x *Account) GetServerTimeGMTOffset() int64 {
	if x != nil {
		return x.ServerTimeGMTOffset
	}
	return 0
}

func (x *Account) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Account) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Account) GetDeleted() int64 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

var File_account_proto protoreflect.FileDescriptor

var file_account_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x22,
	0xe5, 0x06, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61,
	0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a,
	0x0b, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61, 0x74, 0x73,
	0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x45, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x62, 0x65, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x6f, 0x70, 0x6f, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x6f,
	0x70, 0x6f, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74,
	0x12, 0x3b, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x61, 0x74, 0x73,
	0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x4d, 0x54, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x54, 0x69, 0x6d, 0x65, 0x47, 0x4d, 0x54, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x47, 0x4d, 0x54, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x4d,
	0x54, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x4d, 0x54, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x47, 0x4d, 0x54, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2a, 0x8d, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x44, 0x45, 0x4d, 0x4f, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0x56, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x6f, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x1c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x4f, 0x55, 0x54,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x4f,
	0x55, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x01, 0x2a,
	0x85, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x5f, 0x4e, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12,
	0x26, 0x0a, 0x22, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49,
	0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x48, 0x45,
	0x44, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x65, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42,
	0x49, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x59, 0x44,
	0x58, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x45,
	0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x45, 0x58, 0x43, 0x10, 0x02, 0x42, 0x11,
	0x5a, 0x0f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2d, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2f, 0x76,
	0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_account_proto_rawDescOnce sync.Once
	file_account_proto_rawDescData = file_account_proto_rawDesc
)

func file_account_proto_rawDescGZIP() []byte {
	file_account_proto_rawDescOnce.Do(func() {
		file_account_proto_rawDescData = protoimpl.X.CompressGZIP(file_account_proto_rawDescData)
	})
	return file_account_proto_rawDescData
}

var file_account_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_account_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_account_proto_goTypes = []interface{}{
	(AccountTradeMode)(0),   // 0: tickerbeats.v3.AccountTradeMode
	(AccountStopoutMode)(0), // 1: tickerbeats.v3.AccountStopoutMode
	(AccountMarginMode)(0),  // 2: tickerbeats.v3.AccountMarginMode
	(AccountExchange)(0),    // 3: tickerbeats.v3.AccountExchange
	(*Account)(nil),         // 4: tickerbeats.v3.Account
}
var file_account_proto_depIdxs = []int32{
	0, // 0: tickerbeats.v3.Account.trade_mode:type_name -> tickerbeats.v3.AccountTradeMode
	2, // 1: tickerbeats.v3.Account.margin_mode:type_name -> tickerbeats.v3.AccountMarginMode
	1, // 2: tickerbeats.v3.Account.stopout_mode:type_name -> tickerbeats.v3.AccountStopoutMode
	3, // 3: tickerbeats.v3.Account.exchange:type_name -> tickerbeats.v3.AccountExchange
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_account_proto_init() }
func file_account_proto_init() {
	if File_account_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_account_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_account_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_account_proto_goTypes,
		DependencyIndexes: file_account_proto_depIdxs,
		EnumInfos:         file_account_proto_enumTypes,
		MessageInfos:      file_account_proto_msgTypes,
	}.Build()
	File_account_proto = out.File
	file_account_proto_rawDesc = nil
	file_account_proto_goTypes = nil
	file_account_proto_depIdxs = nil
}
