// Code generated by MockGen. DO NOT EDIT.
// Source: queues/queue_interface.go

// Package queues is a generated GoMock package.
package queues

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIConcurrentQueue is a mock of IConcurrentQueue interface.
type MockIConcurrentQueue struct {
	ctrl     *gomock.Controller
	recorder *MockIConcurrentQueueMockRecorder
}

// MockIConcurrentQueueMockRecorder is the mock recorder for MockIConcurrentQueue.
type MockIConcurrentQueueMockRecorder struct {
	mock *MockIConcurrentQueue
}

// NewMockIConcurrentQueue creates a new mock instance.
func NewMockIConcurrentQueue(ctrl *gomock.Controller) *MockIConcurrentQueue {
	mock := &MockIConcurrentQueue{ctrl: ctrl}
	mock.recorder = &MockIConcurrentQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConcurrentQueue) EXPECT() *MockIConcurrentQueueMockRecorder {
	return m.recorder
}

// Dequeue mocks base method.
func (m *MockIConcurrentQueue) Dequeue() (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dequeue")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dequeue indicates an expected call of Dequeue.
func (mr *MockIConcurrentQueueMockRecorder) Dequeue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dequeue", reflect.TypeOf((*MockIConcurrentQueue)(nil).Dequeue))
}

// Enqueue mocks base method.
func (m *MockIConcurrentQueue) Enqueue(data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockIConcurrentQueueMockRecorder) Enqueue(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockIConcurrentQueue)(nil).Enqueue), data)
}

// GetSize mocks base method.
func (m *MockIConcurrentQueue) GetSize() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetSize indicates an expected call of GetSize.
func (mr *MockIConcurrentQueueMockRecorder) GetSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockIConcurrentQueue)(nil).GetSize))
}
